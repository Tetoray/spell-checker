/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TarikAlrayan.project2;

import java.awt.Color;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JTextArea;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

/**
 *
 * @author tarek
 */
public class TarikAlrayanProjectFrame extends javax.swing.JFrame {

    /**
     * Creates new form ProjectFrame
     */
    public TarikAlrayanProjectFrame() {
        initComponents();
        k = (int) spinner_kNum.getValue();
        String filePath = "src/main/java/TarikAlrayan/project2/Dictionary.txt";
        File file = new File(filePath);
        dictionaryOp.getDicFromFile(file, dictionary);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_text = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_word = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_corrections = new javax.swing.JList<>();
        btn_replace = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        btn_auto = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        spinner_kNum = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(615, 490));

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(600, 450));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(600, 450));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(600, 450));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(600, 450));
        jPanel1.setMinimumSize(new java.awt.Dimension(600, 450));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 450));

        txt_text.setColumns(20);
        txt_text.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txt_text.setRows(5);
        txt_text.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_textMouseClicked(evt);
            }
        });
        txt_text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_textKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txt_text);

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel1.setText("Spell Checking and Autocomplete Project");

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel2.setText("corrections");

        txt_word.setEditable(false);
        txt_word.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel3.setText("please enter the text :");

        jLabel4.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel4.setText("wrong word");

        jScrollPane2.setViewportView(list_corrections);

        btn_replace.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        btn_replace.setText("Replace");
        btn_replace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_replaceActionPerformed(evt);
            }
        });

        btn_clear.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        btn_auto.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        btn_auto.setText("Autocomplete");
        btn_auto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_autoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_auto)
                                .addGap(28, 28, 28)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(txt_word, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                                    .addComponent(jLabel2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_replace)
                                .addGap(29, 29, 29)))))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(jLabel3)
                    .addContainerGap(310, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txt_word, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_clear)
                    .addComponent(btn_auto)
                    .addComponent(btn_replace))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(78, 78, 78)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(332, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("App", jPanel1);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jLabel5.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 255));
        jLabel5.setText("space/Enter");

        spinner_kNum.setModel(new javax.swing.SpinnerNumberModel(2, 1, 999, 1));
        spinner_kNum.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_kNumStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 255));
        jLabel6.setText("Settings");

        jLabel7.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Suggestions number");

        jLabel8.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("works when the user sellect a correction from list and replace the text");

        jLabel9.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 255));
        jLabel9.setText("About the program");

        jLabel10.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 255));
        jLabel10.setText("Replace");

        jLabel11.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("works when the user finish writing a word and check it ");

        jLabel12.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 255));
        jLabel12.setText("autocomplete");

        jLabel14.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));

        jLabel13.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 255));
        jLabel13.setText("mouse click");

        jLabel15.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("works when the user click on a wrong word it gives the corrections");

        jLabel16.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("auto complete the last writed word with the closest word ");

        jLabel17.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 255));
        jLabel17.setText("clear");

        jLabel18.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("clear the text and corrections");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(536, 536, 536)
                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(34, 34, 34))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(43, 43, 43)
                        .addComponent(spinner_kNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(269, 269, 269))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(56, 56, 56))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel11)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(164, 164, 164)
                                .addComponent(jLabel18))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel16)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner_kNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(40, 40, 40)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16))
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel14))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Settings", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //global varraibles to use in the hall project
    TarikAlrayanBinaryTree dictionary = new TarikAlrayanBinaryTree<>();
    TarikAlrayanBinaryTree corrections = new TarikAlrayanBinaryTree<>();
    TarikAlrayanDictionary dictionaryOp = new TarikAlrayanDictionary<>();
    int k;
    

    private void txt_textKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_textKeyPressed
        //event to check if the pressed key is equal to space or enter and call the findClosestWords function
        if (evt.getKeyCode() == KeyEvent.VK_SPACE || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            findClosestWords();
        }

    }//GEN-LAST:event_txt_textKeyPressed

    private void btn_replaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_replaceActionPerformed
        // event to replace the wrong word with the sellected word in the list 

        //check if th eword is found in the dictionary and then aplly to replace the word with the correction
        if (!dictionaryOp.contains(dictionary.getRoot(), txt_word.getText())) {
            String word = list_corrections.getSelectedValue();
            String wrongWord = txt_word.getText();
            String text = getClearText(txt_text);

            int index = text.indexOf(wrongWord);

            while (index != -1) {
                // Replace the found word with the replacement word
                text = text.substring(0, index) + word + text.substring(index + wrongWord.length());

                // Find the next occurrence of the word to find
                index = text.indexOf(wrongWord, index + word.length());
            }

            // Update the text area with the replaced text
            txt_text.setText(text);
        }

        findClosestWords();

    }//GEN-LAST:event_btn_replaceActionPerformed

    private void btn_autoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_autoActionPerformed
        // event for the autocomplete button it class the autoComplete function
        autoComplete(txt_text);
    }//GEN-LAST:event_btn_autoActionPerformed

    private void txt_textMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_textMouseClicked
        // event to get the word thet the muse click on and if the word wrong it returns the corrections
        JTextComponent textComp = (JTextComponent) evt.getSource();
        Point pt = new Point(evt.getX(), evt.getY());
        int pos = textComp.viewToModel(pt);

        // Get the word containing the clicked position
        String text = textComp.getText();
        int start = text.lastIndexOf(" ", pos) + 1;
        int end = text.indexOf(" ", pos);
        if (end == -1) {
            end = text.length();
        }
        String clickedWord = "";
        if (end >= start) {
            clickedWord = text.substring(start, end);
        }
        //check if the word is not equal to empty then call the findClosestWords function
        if (!clickedWord.trim().isEmpty()) {
            findClosestWords(clickedWord);
        } else {
            findClosestWords();
        }

    }//GEN-LAST:event_txt_textMouseClicked

    private void spinner_kNumStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_kNumStateChanged
        //event that check the stat of the spinner that change the k number
        k = (int) spinner_kNum.getValue();
        findClosestWords();
    }//GEN-LAST:event_spinner_kNumStateChanged

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        // event for the clear button clears all the text areas and lists 
        txt_text.setText("");
        txt_word.setText("");
        DefaultListModel model = new DefaultListModel();
        list_corrections.setModel(model);
    }//GEN-LAST:event_btn_clearActionPerformed

    private void autoComplete(JTextArea txt) {
        String word = getLastWord(txt);
        String closest = findClosestWord(word);
        if (!closest.isEmpty()) {
            String text = txt_text.getText().trim();
            String[] words = text.split(" ");
            words[words.length - 1] = closest;
            String updatedText = String.join(" ", words);
            txt.setText(updatedText);
            findClosestWords();
        }

    }

    // this method takes a sellected word and check if it found in dictionary  else it will returns the list of suggestions  
    private void findClosestWords(String word) {
        {
            //check if the word found in the dictionary
            if (!dictionaryOp.contains(dictionary.getRoot(), word)) {
                DefaultListModel<String> listModel = new DefaultListModel<>();
                corrections = dictionaryOp.findClosestWords(dictionary.getRoot(), word, k);
                txt_word.setText(word);
                setListFromTree(listModel, corrections.getRoot());
                list_corrections.setModel(listModel);

            } else {
                DefaultListModel<String> EmptylistModel = new DefaultListModel<>();
                txt_word.setText("");
                list_corrections.setModel(EmptylistModel);
            }
        }

    }

    //this method takes a word and check if it found in dictionary and if it not found resturns the closest word in dictonary 
    private String findClosestWord(String word) {

        String closest = "";
        if (!dictionaryOp.contains(dictionary.getRoot(), word)) {
            DefaultListModel<String> listModel = new DefaultListModel<>();
            corrections = dictionaryOp.findClosestWords(dictionary.getRoot(), word, k);
            txt_word.setText(word);
            setListFromTree(listModel, corrections.getRoot());
            list_corrections.setModel(listModel);
            closest = listModel.getElementAt(0);

        } else {
            DefaultListModel<String> EmptylistModel = new DefaultListModel<>();
            txt_word.setText("");
            list_corrections.setModel(EmptylistModel);
        }

        return closest;

    }

    //this method control the hall text area if there is any word not found in the dictionary its highlight it and return the suggestions
    private void findClosestWords() {

        //clear the old highlighter on the text
        Highlighter highlighter = txt_text.getHighlighter();
        highlighter.removeAllHighlights();
        String text = getClearText(txt_text);
        String[] words = text.split("\\s+"); // Split by whitespace characters
        //loop all the word in the text area
        for (String word : words) {
            if (!word.isEmpty()) {

                //check if the 
                if (!dictionaryOp.contains(dictionary.getRoot(), word)) {
                    DefaultListModel<String> listModel = new DefaultListModel<>();
                    corrections = dictionaryOp.findClosestWords(dictionary.getRoot(), word, k);
                    txt_word.setText(word);
                    try {
                        highlightWord(txt_text, word, highlighter);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(TarikAlrayanProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    setListFromTree(listModel, corrections.getRoot());
                    list_corrections.setModel(listModel);

                } else {
                    DefaultListModel<String> EmptylistModel = new DefaultListModel<>();
                    txt_word.setText("");
                    list_corrections.setModel(EmptylistModel);
                }
            }

        }

    }

    private void setListFromTree(DefaultListModel listModel, TarikAlrayanNode node) {
        if (node == null) {
            return;
        }
        setListFromTree(listModel, node.getLeft());
        listModel.addElement(node.getData());
        setListFromTree(listModel, node.getRight());
    }

    private String getLastWord(JTextArea txt) {
        String area = getClearText(txt);
        String word = "";

        area = area.trim();

        int last = area.lastIndexOf(" ");

        if (last == -1) {
            word = area;
        } else {
            word = area.substring(last + 1);
        }
        return word.toLowerCase();
    }

    private void highlightWord(JTextArea textArea, String wordToHighlight, Highlighter highlighter) throws BadLocationException {

        String text = getClearText(txt_text);
        int pos = text.indexOf(wordToHighlight);
        if (pos >= 0) {
            int endPos = pos + wordToHighlight.length(); // calculate end position of highlight
            highlighter.addHighlight(pos, endPos, new DefaultHighlighter.DefaultHighlightPainter(Color.red));
            return;
        }
    }

    private String getClearText(JTextArea txt) {
        String text = txt.getText();
        String cleaned = text.trim();
        // Replace all multiple spaces with a single space
        cleaned = cleaned.replaceAll("\\s+", " ");
        // Remove all punctuation except for periods, question marks, and exclamation points
        cleaned = cleaned.replaceAll("[^\\w\\s.?!]", "");
        cleaned = cleaned.toLowerCase();

        return cleaned;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TarikAlrayanProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TarikAlrayanProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TarikAlrayanProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TarikAlrayanProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TarikAlrayanProjectFrame frame = new TarikAlrayanProjectFrame();

                frame.setLocationRelativeTo(null);
                frame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_auto;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_replace;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> list_corrections;
    private javax.swing.JSpinner spinner_kNum;
    private javax.swing.JTextArea txt_text;
    private javax.swing.JTextField txt_word;
    // End of variables declaration//GEN-END:variables
}
